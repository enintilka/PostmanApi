{
	"info": {
		"_postman_id": "959f601b-6ea8-4f77-906d-0d8bd4460619",
		"name": "Verify user",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40328638",
		"_collection_link": "https://shuffle-the-damn-cards-d.postman.co/workspace/Shuffle-the-damn-cards-%3AD-Works~9db00939-daf8-4cdd-8424-a22b5a4364fc/collection/40328638-959f601b-6ea8-4f77-906d-0d8bd4460619?action=share&source=collection_link&creator=40328638"
	},
	"item": [
		{
			"name": "Single user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains data\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"data\");\r",
							"});\r",
							"\r",
							"pm.test(\"User data is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"     pm.expect(jsonData.data.id).to.equal(2);\r",
							"      pm.expect(jsonData.data.first_name).to.equal(\"Janet\");\r",
							"      pm.expect(jsonData.data.last_name).to.equal(\"Weaver\");\r",
							"});\r",
							"\r",
							"pm.test(\"Avatar URL is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.avatar).to.equal(\"https://reqres.in/img/faces/2-image.jpg\");\r",
							"});\r",
							"\r",
							"pm.test(\"Support object is correct\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"support\");\r",
							"    pm.expect(jsonData.support.url).to.equal(\"https://contentcaddy.io?utm_source=reqres&utm_medium=json&utm_campaign=referral\")\r",
							"    pm.expect(jsonData.support.text).to.equal(\"Tired of writing endless social media content? Let Content Caddy generate it for you.\")\r",
							"    \r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASEURL}}/api/users/2",
					"host": [
						"{{BASEURL}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single user not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is empty JSON\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"object\").that.is.empty;\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASEURL}}/api/users/23",
					"host": [
						"{{BASEURL}}"
					],
					"path": [
						"api",
						"users",
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "List users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains required fields\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"page\");\r",
							"    pm.expect(jsonData).to.have.property(\"per_page\");\r",
							"    pm.expect(jsonData).to.have.property(\"total\");\r",
							"    pm.expect(jsonData).to.have.property(\"total_pages\");\r",
							"    pm.expect(jsonData).to.have.property(\"data\");\r",
							"    pm.expect(jsonData).to.have.property(\"support\");\r",
							"});\r",
							"\r",
							"pm.test(\"Data array contains expected users\", function () {\r",
							"    pm.expect(jsonData.data).to.be.an(\"array\").with.lengthOf(6);\r",
							"\r",
							"    var expectedIds = [7, 8, 9, 10, 11, 12];\r",
							"    var actualIds = jsonData.data.map(user => user.id);\r",
							"        \r",
							"    expectedIds.forEach(id => {\r",
							"        pm.expect(actualIds).to.include(id);\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Each user has required properties\", function () {\r",
							"    jsonData.data.forEach(user => {\r",
							"        pm.expect(user).to.have.property(\"id\").that.is.a(\"number\");\r",
							"        pm.expect(user).to.have.property(\"email\").that.is.a(\"string\");\r",
							"        pm.expect(user).to.have.property(\"first_name\").that.is.a(\"string\");\r",
							"        pm.expect(user).to.have.property(\"last_name\").that.is.a(\"string\");\r",
							"        pm.expect(user).to.have.property(\"avatar\").that.is.a(\"string\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Support object contains URL and text\", function () {\r",
							"    pm.expect(jsonData.support).to.have.property(\"url\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData.support).to.have.property(\"text\").that.is.a(\"string\");\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASEURL}}/api/users?page=2",
					"host": [
						"{{BASEURL}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "List <resource>",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Response contains required fields\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"page\");\r",
							"    pm.expect(jsonData).to.have.property(\"per_page\");\r",
							"    pm.expect(jsonData).to.have.property(\"total\");\r",
							"    pm.expect(jsonData).to.have.property(\"total_pages\");\r",
							"    pm.expect(jsonData).to.have.property(\"data\");\r",
							"    pm.expect(jsonData).to.have.property(\"support\");\r",
							"});\r",
							"\r",
							"pm.test(\"Data array has 6 items\", function () {\r",
							"    pm.expect(jsonData.data).to.be.an(\"array\").with.lengthOf(6);\r",
							"});\r",
							"\r",
							"pm.test(\"Each object in data has correct properties\", function () {\r",
							"    jsonData.data.forEach(function(item) {\r",
							"        pm.expect(item).to.have.property(\"id\").that.is.a(\"number\");\r",
							"        pm.expect(item).to.have.property(\"name\").that.is.a(\"string\");\r",
							"        pm.expect(item).to.have.property(\"year\").that.is.a(\"number\");\r",
							"        pm.expect(item).to.have.property(\"color\").that.is.a(\"string\");\r",
							"        pm.expect(item).to.have.property(\"pantone_value\").that.is.a(\"string\");\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Support object contains URL and text\", function () {\r",
							"    pm.expect(jsonData.support).to.have.property(\"url\").that.is.a(\"string\");\r",
							"    pm.expect(jsonData.support).to.have.property(\"text\").that.is.a(\"string\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASEURL}}/api/unknown",
					"host": [
						"{{BASEURL}}"
					],
					"path": [
						"api",
						"unknown"
					]
				}
			},
			"response": []
		},
		{
			"name": "Single <resource> not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is empty JSON\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"object\").that.is.empty;\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASEURL}}/api/unknown/23",
					"host": [
						"{{BASEURL}}"
					],
					"path": [
						"api",
						"unknown",
						"23"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"pm.environment.set(\"user_id\", jsonData.id);\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify ID is captured correctly\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"user_id\"));\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"verify name\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"morpheus\");\r",
							"});\r",
							"\r",
							"pm.test(\"Verify job\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.job).to.eql(\"leader\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"verify id\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"});\r",
							"\r",
							"pm.test(\"check createdAt\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"createdAt\");\r",
							"});\r",
							"\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.environment.set(\"user_id\", jsonData.id);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"leader\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASEURL}}/api/users",
					"host": [
						"{{BASEURL}}"
					],
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create new user Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"console.log(pm.response.json());\r",
							"\r",
							"\r",
							"pm.test(\"Response contains correct name and job\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.eql(\"morpheus\");\r",
							"    pm.expect(jsonData.job).to.eql(\"zion resident\");\r",
							"    \r",
							"});\r",
							"\r",
							"pm.test(\"'updatedAt' is a valid timestamp\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"updatedAt\");\r",
							"    let date = new Date(jsonData.updatedAt);\r",
							"    pm.expect(date.toISOString()).to.eql(jsonData.updatedAt);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASEURL}}/api/users/2",
					"host": [
						"{{BASEURL}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"\r",
							"pm.test(\"Response body is empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.equal(\"\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"zion resident\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASEURL}}/api/users/2",
					"host": [
						"{{BASEURL}}"
					],
					"path": [
						"api",
						"users",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains id and token\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData).to.have.property(\"token\");\r",
							"\r",
							"    pm.test(\"id is 4\", function () {\r",
							"        var jsonData = pm.response.json();\r",
							"        pm.expect(jsonData.id).to.equal(4);\r",
							"\r",
							"        pm.test(\"tokes is correct\", function () {\r",
							"            var jsonData = pm.response.json();\r",
							"            pm.expect(jsonData.token).to.eql(\"QpwL5tke4Pnpja7X4\");\r",
							"        });\r",
							"    });\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASEURL}}/api/register",
					"host": [
						"{{BASEURL}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Register - unsuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message is 'Missing password'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.eql(\"Missing password\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"sydney@fife\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASEURL}}/api/register",
					"host": [
						"{{BASEURL}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - successful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Token is present\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.token).to.exist;  \r",
							"    pm.expect(jsonData.token).to.be.a(\"string\");  \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASEURL}}/api/login",
					"host": [
						"{{BASEURL}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login - unsuccessful",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Error message is 'Missing password'\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error).to.eql(\"Missing password\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"peter@klaven\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASEURL}}/api/login",
					"host": [
						"{{BASEURL}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delayed response",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response time is greater than or equal to 20ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.above(20);  \r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"peter@klaven\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASEURL}}/api/users?page=2",
					"host": [
						"{{BASEURL}}"
					],
					"path": [
						"api",
						"users"
					],
					"query": [
						{
							"key": "page",
							"value": "2"
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "BASEURL",
			"value": "https://reqres.in",
			"type": "default"
		}
	]
}