{
	"info": {
		"_postman_id": "7b0b61d6-b617-44b4-80b4-3ef30c81819a",
		"name": "Shuffle the card",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40328638",
		"_collection_link": "https://shuffle-the-damn-cards-d.postman.co/workspace/Shuffle-the-damn-cards-%3AD-Works~9db00939-daf8-4cdd-8424-a22b5a4364fc/collection/40328638-7b0b61d6-b617-44b4-80b4-3ef30c81819a?action=share&source=collection_link&creator=40328638"
	},
	"item": [
		{
			"name": "Make Pile",
			"item": [
				{
					"name": "Shuffle the Cards",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"deck_id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Check if success is true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if remaining is 52\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.remaining).to.eql(52);\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.shuffled).to.eql(true);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/api/deck/new/shuffle/?deck_count=1",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"deck",
								"new",
								"shuffle",
								""
							],
							"query": [
								{
									"key": "deck_count",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Draw a Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var DeckData = pm.response.json();\r",
									"pm.globals.set(\"deck_id\", DeckData.deck_id);\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if success is true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Deck ID should be a string\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.deck_id).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Cards array should have 2 items\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.cards).to.be.an(\"array\").with.lengthOf(2);\r",
									"});\r",
									"\r",
									"pm.test(\"First card should have correct properties\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    var firstCard = jsonData.cards[0];\r",
									"    pm.expect(firstCard).to.have.all.keys('code', 'image', 'images', 'value', 'suit');\r",
									"    pm.expect(firstCard.value).to.be.a('string');\r",
									"    pm.expect(firstCard.suit).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.remaining).to.be.a(\"number\").and.to.eql(50);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/api/deck/{{deck_id}}/draw/?count=2",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"deck",
								"{{deck_id}}",
								"draw",
								""
							],
							"query": [
								{
									"key": "count",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Reshuffle the Cards",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var DeckData = pm.response.json();\r",
									"pm.globals.set(\"deck_id\", DeckData.deck_id);\r",
									"\r",
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"deck_id\");\r",
									"pm.test(\"Deck is shuffled\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.shuffled).to.be.true;\r",
									"});\r",
									"    pm.test(\"remaining is 52\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.remaining).to.equal(52);\r",
									"    });\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/api/deck/{{deck_id}}/shuffle/",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"deck",
								"{{deck_id}}",
								"shuffle",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "A Brand New Deck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var DeckData = pm.response.json();\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.globals.set(\"deck_id\", DeckData.deck_id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}/api/deck/new/",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"deck",
								"new",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "A Partial Deck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var DeckData = pm.response.json();\r",
									"pm.globals.set(\"deck_id\", DeckData.deck_id);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if success is true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.success).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if shuffled is true\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.shuffled).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Check if remaining is 12\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.remaining).to.eql(12);\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{BaseUrl}}api/deck/new/shuffle/?cards=AS,2S,KS,AD,2D,KD,AC,2C,KC,AH,2H,KH",
							"host": [
								"{{BaseUrl}}api"
							],
							"path": [
								"deck",
								"new",
								"shuffle",
								""
							],
							"query": [
								{
									"key": "cards",
									"value": "AS,2S,KS,AD,2D,KD,AC,2C,KC,AH,2H,KH"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Adding to Piles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var DeckData = pm.response.json();\r",
									"pm.globals.set(\"deck_id\", DeckData.deck_id);\r",
									"pm.globals.set(\"pile_name\", \"discard\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/deck/{{deck_id}}/pile/discard/add/?cards=8S,9S",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"deck",
								"{{deck_id}}",
								"pile",
								"discard",
								"add",
								""
							],
							"query": [
								{
									"key": "cards",
									"value": "8S,9S"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Shuffle Piles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var DeckData = pm.response.json();\r",
									"pm.globals.set(\"deck_id\", DeckData.deck_id);\r",
									"pm.globals.set(\"pile_name\", \"discard\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/deck/{{deck_id}}/pile/discard/shuffle/",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"deck",
								"{{deck_id}}",
								"pile",
								"discard",
								"shuffle",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Drawing from Piles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var DeckData = pm.response.json();\r",
									"pm.globals.set(\"deck_id\", DeckData.deck_id);\r",
									"pm.globals.set(\"pile_name\", \"discard\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/deck/{{deck_id}}/pile/discard/draw/random/",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"deck",
								"{{deck_id}}",
								"pile",
								"discard",
								"draw",
								"random",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "Returning cards to the deck",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var DeckData = pm.response.json();\r",
									"pm.globals.set(\"deck_id\", DeckData.deck_id);\r",
									"pm.globals.set(\"pile_name\", \"discard\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{BaseUrl}}/api/deck/{{deck_id}}/return/?cards=8S",
							"host": [
								"{{BaseUrl}}"
							],
							"path": [
								"api",
								"deck",
								"{{deck_id}}",
								"return",
								""
							],
							"query": [
								{
									"key": "cards",
									"value": "8S"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Back of Card Image",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// No JSON response, removed the JSON parsing\r",
									"pm.globals.set(\"deck_id\", pm.response.json().deck_id);\r",
									"pm.globals.set(\"pile_name\", \"discard\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://deckofcardsapi.com/static/img/back.png",
							"protocol": "https",
							"host": [
								"deckofcardsapi",
								"com"
							],
							"path": [
								"static",
								"img",
								"back.png"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"var DeckData = pm.response.json();\r",
					"pm.globals.set(\"deck_id\", DeckData.deck_id);\r",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "drawnCard",
			"value": ""
		}
	]
}